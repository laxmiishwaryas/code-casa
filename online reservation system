import java.util.Scanner;

public class Task1 {
    private static final int MAX_RECORDS = 1000; // Maximum number of records

    public static class User {
        private String username;
        private String password;

        Scanner sc = new Scanner(System.in);



        public String getUsername() {
            System.out.println("Enter Username : ");
            username = sc.nextLine();
            return username;
        }

        public String getPassword() {
            System.out.println("Enter Password : ");
            password = sc.nextLine();
            return password;
        }
    }

    public static class PnrRecord {
        private int pnrNumber;
        private String passengerName;
        private String trainNumber;
        private String classType;
        private String journeyDate;
        private String from;
        private String to;

        public PnrRecord(int pnrNumber, String passengerName, String trainNumber, String classType, String journeyDate, String from, String to) {
            this.pnrNumber = pnrNumber;
            this.passengerName = passengerName;
            this.trainNumber = trainNumber;
            this.classType = classType;
            this.journeyDate = journeyDate;
            this.from = from;
            this.to = to;
        }

        public int getPnrNumber() {
            return pnrNumber;
        }

        public String getPassengerName() {
            return passengerName;
        }

        public String getTrainNumber() {
            return trainNumber;
        }

        public String getClassType() {
            return classType;
        }

        public String getJourneyDate() {
            return journeyDate;
        }

        public String getFrom() {
            return from;
        }

        public String getTo() {
            return to;
        }
    }

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        User user = new User();
        String username = user.getUsername();
        String password = user.getPassword();

        PnrRecord[] records = new PnrRecord[MAX_RECORDS];
        int recordCount = 0; // Counter to keep track of number of records

        while (true) {
            System.out.println("Enter the choice : ");
            System.out.println("1. Insert Record.");
            System.out.println("2. Show All Records.");
            System.out.println("3. Cancel Ticket.");
            System.out.println("4. Exit.");
            int choice = sc.nextInt();
            sc.nextLine(); // Consume newline

            if (choice == 1) {
                if (recordCount < MAX_RECORDS) {
                    System.out.println("Enter the passenger name : ");
                    String passengerName = sc.nextLine();
                    System.out.println("Enter the train number : ");
                    String trainNumber = sc.nextLine();
                    System.out.println("Enter the class type : ");
                    String classType = sc.nextLine();
                    System.out.println("Enter the Journey date as 'YYYY-MM-DD' format");
                    String journeyDate = sc.nextLine();
                    System.out.println("Enter the starting place : ");
                    String from = sc.nextLine();
                    System.out.println("Enter the destination place :  ");
                    String to = sc.nextLine();

                    records[recordCount] = new PnrRecord(generatePnrNumber(), passengerName, trainNumber, classType, journeyDate, from, to);
                    recordCount++;

                    System.out.println("Record added successfully.");
                } else {
                    System.out.println("Maximum number of records reached.");
                }
            } else if (choice == 2) {
                System.out.println("\nAll records printing.\n");
                for (int i = 0; i < recordCount; i++) {
                    PnrRecord record = records[i];
                    System.out.println("PNR Number: " + record.getPnrNumber());
                    System.out.println("Passenger Name: " + record.getPassengerName());
                    System.out.println("Train Number: " + record.getTrainNumber());
                    System.out.println("Class Type: " + record.getClassType());
                    System.out.println("Journey Date: " + record.getJourneyDate());
                    System.out.println("From Location: " + record.getFrom());
                    System.out.println("To Location: " + record.getTo());
                    System.out.println("--------------");
                }
            } else if (choice == 3) {
                System.out.println("Enter the PNR number to cancel the ticket : ");
                int pnrNumberToCancel = sc.nextInt();
                sc.nextLine(); // Consume newline
                boolean ticketCancelled = false;
                for (int i = 0; i < recordCount; i++) {
                    if (records[i].getPnrNumber() == pnrNumberToCancel) {
                        // Shift records to remove the cancelled ticket
                        for (int j = i; j < recordCount - 1; j++) {
                            records[j] = records[j + 1];
                        }
                        recordCount--;
                        ticketCancelled = true;
                        System.out.println("Ticket with PNR number " + pnrNumberToCancel + " has been cancelled.");
                        break;
                    }
                }
                if (!ticketCancelled) {
                    System.out.println("No ticket found with PNR number " + pnrNumberToCancel + ".");
                }
            } else if (choice == 4) {
                System.out.println("Exiting the program.\n");
                break;
            } else {
                System.out.println("Invalid Choice Entered.\n");
            }
        }

        sc.close();
    }

    private static int generatePnrNumber() {
        // Generate a random PNR number
        return (int) (Math.random() * 9000) + 1000;
    }
}
